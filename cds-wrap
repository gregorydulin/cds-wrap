#!/usr/bin/env python3
"""
Module Docstring
"""

__author__ = "Gregory M. Dulin"
__version__ = "0.1.0"
__license__ = "MIT"

import argparse
import datetime
import tarfile
import tempfile
import quopri
from logzero import logger


def wrap_files(args):
    temp_file = tempfile.NamedTemporaryFile()

    cds_package_tar = tarfile.open(
        name = temp_file.name,
        fileobj = temp_file,
        mode = 'w',
    )

    logger.info("Adding files to tar")
    logger.debug(args.paths)
    for path in args.paths:
        logger.debug("Adding " + path)
        cds_package_tar.add(path)

    logger.info("Closing tar file")
    cds_package_tar.close()
    temp_file.seek(0)

    logger.debug("Opening qp.txt file for writing")
    cds_package_qp_file = open(
        file = (
          'cds-wrap-package_'
          + datetime.datetime.now().strftime("%Y-%m-%dT%H%M%S")
          + '.qp.txt'
        ),
        mode = 'wb',
    )

    logger.info("Encoding tar file using quoted-printable encoding")
    quopri.encode(
        input = temp_file,
        output = cds_package_qp_file,
        quotetabs = False,
    )

    logger.debug("Closing files")
    temp_file.close()
    cds_package_qp_file.close()

def unwrap_files(args):
    for path in args.paths:
        logger.info("Unwrapping " + path)

        qp_file = open(
            file = path,
            mode = "r",
        )

        temp_file = tempfile.NamedTemporaryFile()

        quopri.decode(
            input = qp_file,
            output = temp_file,
        )
        temp_file.seek(0)

        tar_file = tarfile.open(
            name = temp_file.name,
            fileobj = temp_file,
            mode = 'r'
        )

        tar_file.extractall()

def main(args):
    """ Main entry point of the app """
    logger.info(args)

    if not args.unwrap:
        wrap_files(args)

    if args.unwrap:
        unwrap_files(args)

if __name__ == "__main__":
    """ This is executed when run from the command line """
    parser = argparse.ArgumentParser()

    ## Required positional argument
    #parser.add_argument("arg", help="Required positional argument")

    ## Optional argument flag which defaults to False
    #parser.add_argument("-f", "--flag", action="store_true", default=False)

    ## Optional argument which requires a parameter (eg. -d test)
    #parser.add_argument("-n", "--name", action="store", dest="name")

    # Optional verbosity counter (eg. -v, -vv, -vvv, etc.)
    parser.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="Verbosity (-v, -vv, etc)"
    )

    # Specify output of "--version"
    parser.add_argument(
        "--version",
        action="version",
        version="%(prog)s (version {version})".format(version=__version__)
    )

    parser.add_argument(
        "-u",
        "--unwrap",
        action="store_true",
        default=False,
        help="unwrap files instead of wrapping them"
    )

    parser.add_argument(
        'paths',
        nargs='+',
        help='Path of a file or a folder of files.'
    )

    args = parser.parse_args()
    main(args)
