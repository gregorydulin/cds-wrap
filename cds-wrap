#!/usr/bin/env python3
"""
Module Docstring
"""

__author__ = "Your Name"
__version__ = "0.1.0"
__license__ = "MIT"

import argparse
import tarfile
import quopri
from logzero import logger


def main(args):
    """ Main entry point of the app """
    logger.info(args)

    cds_package_tar_path = './cds-package.tar'

    cds_package_tar = tarfile.open(
        name = cds_package_tar_path,
        mode = 'a',
    )

    logger.info("Adding files to tar")
    for path in args.paths:
        logger.debug("Adding " + path)
        cds_package_tar.add(path)

    logger.info("Closing tar file")
    cds_package_tar.close()

    logger.debug("Opening tar file for reading")
    cds_package_tar_file = open(
        file = cds_package_tar_path,
        mode = 'rb',
    )

    logger.debug("Opening qp.txt file for writing")
    cds_package_qp_file = open(
        file = cds_package_tar_path + '.qp.txt',
        mode = 'wb',
    )

    logger.info("Encoding tar file using quoted-printable encoding")
    quopri.encode(
        input = cds_package_tar_file, 
        output = cds_package_qp_file, 
        quotetabs = False,
    )

    logger.debug("Closing files")
    cds_package_tar_file.close()
    cds_package_qp_file.close()

if __name__ == "__main__":
    """ This is executed when run from the command line """
    parser = argparse.ArgumentParser()

    ## Required positional argument
    #parser.add_argument("arg", help="Required positional argument")

    ## Optional argument flag which defaults to False
    #parser.add_argument("-f", "--flag", action="store_true", default=False)

    ## Optional argument which requires a parameter (eg. -d test)
    #parser.add_argument("-n", "--name", action="store", dest="name")

    # Optional verbosity counter (eg. -v, -vv, -vvv, etc.)
    parser.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="Verbosity (-v, -vv, etc)"
    )

    # Specify output of "--version"
    parser.add_argument(
        "--version",
        action="version",
        version="%(prog)s (version {version})".format(version=__version__)
    )

    parser.add_argument(
        'paths', 
        nargs='+', 
        help='Path of a file or a folder of files.'
    )
    
    args = parser.parse_args()
    main(args)
